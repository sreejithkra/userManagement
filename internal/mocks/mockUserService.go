// Code generated by MockGen. DO NOT EDIT.
// Source: C:/Users/sreej/Desktop/clean/userManagement/internal/services/usersevice.go

// Package mock_services is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "userManagement/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// GetProfile mocks base method.
func (m *MockIUserService) GetProfile(userID string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockIUserServiceMockRecorder) GetProfile(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockIUserService)(nil).GetProfile), userID)
}

// Login mocks base method.
func (m *MockIUserService) Login(user *models.UserLogin) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserServiceMockRecorder) Login(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserService)(nil).Login), user)
}

// Signup mocks base method.
func (m *MockIUserService) Signup(user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Signup", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Signup indicates an expected call of Signup.
func (mr *MockIUserServiceMockRecorder) Signup(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Signup", reflect.TypeOf((*MockIUserService)(nil).Signup), user)
}

// UpdateProfile mocks base method.
func (m *MockIUserService) UpdateProfile(userId string, user models.UpdateUser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", userId, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockIUserServiceMockRecorder) UpdateProfile(userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockIUserService)(nil).UpdateProfile), userId, user)
}

// VerifyPassword mocks base method.
func (m *MockIUserService) VerifyPassword(request *models.UserLogin, user *models.User) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPassword", request, user)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifyPassword indicates an expected call of VerifyPassword.
func (mr *MockIUserServiceMockRecorder) VerifyPassword(request, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPassword", reflect.TypeOf((*MockIUserService)(nil).VerifyPassword), request, user)
}
